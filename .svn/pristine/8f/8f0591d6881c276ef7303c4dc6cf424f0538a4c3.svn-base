@{
    ViewBag.Title = "Add";
    var userId = "";
    if (Session["user_au_id"] != null)
    {
        userId = Session["user_au_id"].ToString();
    }
}
<script type="text/javascript">
    var userId = '@userId';
</script>

<div id="context">
    <div class="panel panel-success">
        <div class="panel-heading">Internal EMI Requisition </div>
        <div class="panel-body">
            <div class="row">
                <div class="col-md-12">
                    <div class="col-md-2">
                        <label for="internal_requisition_no">Internal Requisition No</label>
                    </div>
                    <div class="col-md-3">
                        <input id="internal_requisition_no" name="internal_requisition_no" class="k-textbox" placeholder="Auto Generated Code" disabled />
                    </div>
                    <div class="col-md-1"></div>
                    <div class="col-md-2">
                        <label for="requisition_date">Requisition Date</label>
                    </div>
                    <div class="col-md-3" style="margin-left: 5px; margin-top: 4px;">
                        <input id="requisition_date" name="requisition_date" style="width: 100%;" />
                    </div>
                    <div class="col-md-1"></div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="col-md-2">
                        <label for="from_warehouse_id">From Warehouse</label>
                    </div>
                    <div class="col-md-3">
                        <input id="from_warehouse_id" name="from_warehouse_id" />
                    </div>
                    <div class="col-md-1"></div>
                    <div class="col-md-2">
                        <label for="customer_hbu">Customer HBU&nbsp;<i class="fa fa-asterisk fieldRequired"></i></label>
                    </div>
                    <div class="col-md-3">
                        <input id="customer_hbu" name="customer_hbu" />
                    </div>
                    <div class="col-md-1"></div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="col-md-2">
                        <label for="mobile_no">Customer Name&nbsp;<i class="fa fa-asterisk fieldRequired"></i></label>
                    </div>
                    <div class="col-md-3">
                        <input id="customer_name" name="customer_name" class="k-textbox" placeholder="Enter Customer Name" />
                    </div>
                    <div class="col-md-1"></div>
                    <div class="col-md-2">
                        <label for="mobile_no">Customer Mobile</label>
                    </div>
                    <div class="col-md-3">
                        <input id="mobile_no" name="mobile_no" class="k-textbox" placeholder="Enter Mobile No" />
                    </div>
                    <div class="col-md-1"></div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="col-md-2">
                        <label for="pricing">Pricing&nbsp;<i class="fa fa-asterisk fieldRequired"></i></label>
                    </div>
                    <div class="col-md-3">
                        <input id="pricing" name="pricing" />
                    </div>
                    <div class="col-md-1"></div>
                    <div class="col-md-2">
                        <label for="remarks">Remarks</label>
                    </div>
                    <div class="col-md-3">
                        <textarea cols="30" rows="3" name="remarks" id="remarks" class="k-textbox" placeholder="Enter Remarks"></textarea>
                    </div>
                    <div class="col-md-1"></div>
                </div>
            </div>
        </div>
    </div>

    <div class="panel panel-success" id="requisitionGrid">
        <div class="panel-heading">Product List</div>
        <div class="panel-body">
            <div id="listGrid">
                <div class="row">
                    <div id="RequisitionDetailsGrid"></div>
                </div>
            </div>
        </div>
    </div>
    <div class="panel panel-success" id="promotion">
        <div class="panel-heading">Promotion List</div>
        <div class="panel-body">
            <div class="row">
                <div class="col-md-12">
                    <div id="PromotionList"></div>
                </div>
            </div>
            <br />
        </div>
    </div>
    <div class="panel panel-success" id="scanGridForIMEI">
        <div class="panel-heading">Scan Grid</div>
        <div class="panel-body">
            <div class="row" id="daynamicPanel">
                <div class="col-md-12">
                    <div class="col-md-2">
                        <label for="imei_scan"> IMEI Scan</label>
                    </div>
                    <div class="col-md-3">
                        <input id="imei_scan" name="imei_scan" class="k-textbox" placeholder="Enter IMEI" />
                    </div>
                    <div class="col-md-1"></div>
                </div>
            </div>
        </div>

    </div>

    <div class="panel panel-success" id="imeiListGrid">
        <div class="panel-heading">IMEI Scan List</div>
        <div class="panel-body">
            <div>
                <div class="row">
                    <div id="imeiScanGrid"></div>
                </div>
            </div>
        </div>
    </div>

    <div class="panel panel-success" id="payment_information">
        <div class="panel-heading">Payment Information</div>
        <div class="panel-body">
            <div class="row">
                <div class="col-md-12">
                    <div class="col-md-1">
                        <label for="total_invoice_amount">Total Invoice Amount</label>
                    </div>
                    <div class="col-md-1">
                        <input id="total_invoice_amount" name="total_invoice_amount" class="k-textbox" disabled />
                    </div>
                    <div class="col-md-1"></div>
                    <div class="col-md-1">
                        <label for="no_of_installments">No. of Installments&nbsp;<i class="fa fa-asterisk fieldRequired"></i></label>
                    </div>
                    <div class="col-md-1">
                        <input id="no_of_installments" name="no_of_installments" class="k-textbox" />
                    </div>
                    <div class="col-md-1"></div>
                    <div class="col-md-1">
                        <label for="first_installment_date">First Installment Date</label>
                    </div>
                    <div class="col-md-1">
                        <input id="first_installment_date" name="first_installment_date" />
                    </div>
                    <div class="col-md-1"></div>
                    <div class="col-md-1">
                        <input type="button" class="k-button" id="btnGenerateInstallments" name="btnGenerateInstallments" value="Generate Installments" />
                    </div>
                    <div class="col-md-1">

                    </div>
                </div>
            </div><hr />
            <div class="row">
                <div class="col-md-1"></div>
                <div class="col-md-10">
                    <div id="installmentGrid"></div>
                </div>
                <div class="col-md-1"></div>
            </div>
        </div>
    </div>

    <div class="group-box" id="btnDiv">
        <div class="row">
            <div class="col-md-12">
                <input type="button" class="k-button" id="btnInternalRequisition" name="btnInternalRequisition" value="Save Requisition" />
            </div>
        </div>
    </div>
</div>

<!--Javascript and Ajax to Submit the Form-->
<script type="text/javascript">
    $(document).ready(function () {
        $("#btnDiv").hide();
        //$("#requisitionGrid").hide();
        $("#scanGridForIMEI").hide();
        $("#payment_information").hide();
        $("#imeiListGrid").hide();

        $("#no_of_installments").keydown(function (e) {
            if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
                (e.keyCode === 65 && (e.ctrlKey === true || e.metaKey === true)) ||
                (e.keyCode >= 35 && e.keyCode <= 40)) {
                return;
            }
            if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                e.preventDefault();
            }
        });

        $("#btnGenerateInstallments").click(function () {

            function daysInMonth(month, year) {
                return new Date(year, month, 0).getDate();
            }

            var xxx = $("#no_of_installments").val();
            var noOfInstallments = parseInt($("#no_of_installments").val());
            var totalInvoiceAmount = parseInt($("#total_invoice_amount").val());
            var installmentAmount = Math.ceil(totalInvoiceAmount / noOfInstallments);

            if (xxx == "" || xxx == null) {
                swal("Warning", "No Of Installments is empty!!", "warning");
                return false;
            }

            var installmentGridList = [];
            var counter = 1;
            var firstInstallmentDate = $("#first_installment_date").val();

            for (var i = 0; i < noOfInstallments; i++) {

                var d = new Date(firstInstallmentDate);
                month = (d.getMonth() + counter);
                day = d.getDate();
                year = d.getFullYear();
                var daysInMon = daysInMonth(month, year);

                if (day > daysInMon) {
                    day = daysInMon;
                }

                year += Math.floor((month - 1) / 12);
                month = ((month % 12) == 0) ? 12 : (month % 12);

                if (month.length < 2) month = '0' + month;
                if (day.length < 2) day = '0' + day;
                var installmentDate = [year, month, day].join('/');
                var data = {
                    installment_no: counter,
                    installment_date: installmentDate,
                    installment_amount: installmentAmount
                };
                installmentGridList.push(data);
                counter++;
            }

            var dataSource2 = new kendo.data.DataSource({
                transport: {
                    read: function (f) {
                        f.success(installmentGridList);
                    }
                },

                autoSync: false,
                schema: {
                    errors: function (e) {
                        console.log(e.errors);
                        //alert(e.error);
                        if (e.output === "error") {
                            console.log(e.output);
                        }

                    },

                    model: {
                        id: "installment_no",
                        fields: {
                            installment_no: { type: "string" },
                            installment_date: { type: "date" },
                            installment_amount: { type: "string" }
                        }

                    }
                }

            });
            // Imei Scan Grid
            jQuery("#installmentGrid").kendoGrid({
                dataSource: dataSource2,
                scrollable: true,
                columns: [
                    { field: "installment_no", title: "Installment No", width: "50px" },
                    { field: "installment_date", title: "Installment Date", width: "50px", format: "{0:yyyy-MM-dd}" },
                    { field: "installment_amount", title: "Installment Amount", width: "50px" }
                ],
                editable: "inline"
            });

        });


        //DateTime Picker
        var todayDate = kendo.toString(kendo.parseDate(new Date()), 'yyyy/MM/dd');
        $("#requisition_date").val(todayDate);
        $("#requisition_date").kendoDateTimePicker({
            animation: {
                close: {
                    effects: "fadeOut zoom:out",
                    duration: 300
                },
                open: {
                    effects: "fadeIn zoom:in",
                    duration: 300
                }
            },
            value: new Date(),
            format: "yyyy/MM/dd hh:mm tt"
        });

        $("#first_installment_date").val(todayDate);

        $("#first_installment_date").kendoDatePicker({
            animation: {
                close: {
                    effects: "fadeOut zoom:out",
                    duration: 300
                },
                open: {
                    effects: "fadeIn zoom:in",
                    duration: 300
                }
            },
            format: "yyyy/MM/dd"
        });

        //Pricing Dropdown
        var dataOfPricing = [
         { text: "MRP", value: "1" },
         { text: "Dealer", value: "2" },
         { text: "Retailer", value: "3" },
         { text: "Internal", value: "4" },
         { text: "B2B", value: "5" },
         { text: "Manual", value: "6" }
        ];

        $("#pricing").kendoComboBox({

            placeholder: "--- Select Pricing ---",
            dataTextField: "text",
            dataValueField: "value",
            dataSource: dataOfPricing

        });
        var dataOfPaymentType =
        [
             { text: "Cash", value: "1" },
             { text: "Credit", value: "2" }

        ];



        //From warehouse list
        $("#from_warehouse_id").kendoComboBox({
            // autoBind: true,
            placeholder: "--- Select Warehouse ---",
            dataTextField: "warehouse_name",
            dataValueField: "warehouse_id",
            dataSource: {
                type: "json",
                transport: {
                    read: {
                        url: "@UrlConfig.Action("GetAllWarehouses", "Warehouse")"
                    }
                }
            }

        });
        $("#from_warehouse_id").data("kendoComboBox").value(1);



        // To Department
        $("#customer_hbu").kendoComboBox({
            autoBind: false,
            placeholder: "--- Select Customer HBU ---",
            dataTextField: "department_name",
            dataValueField: "department_id",
            dataSource: {
                type: "json",
                transport: {
                    read: {
                        url: "@UrlConfig.Action("GetAllDepartments", "Department")"
                    }
                }
            }
        });

        //warehouse list
        $("#warehouse_id").kendoComboBox({
            autoBind: false,
            placeholder: "--- Select Warehouse ---",
            dataTextField: "warehouse_name",
            dataValueField: "warehouse_id",
            dataSource: {
                type: "json",
                transport: {
                    read: {
                        url: "@UrlConfig.Action("GetAdaWarehouse", "Warehouse")"
                    }
                }
            }
        });
        // Counter For Scan IMEI
        var countScaned = 0;

        //grid start

        var sampleData = [];
        var sampleDataNextID = sampleData.length + 1;

        function getIndexById(id) {
            var idx,
                l = sampleData.length;

            for (var j = 0; j < l; j++) {
                if (sampleData[j].requisition_details_id == id) {
                    return j;
                }
            }
            return null;
        }



        var dataSource = new kendo.data.DataSource({
            transport: {
                read: function (e) {
                    e.success(sampleData);
                },
                create: function (e) {

                    // assign an ID to the new item
                    e.data.requisition_details_id = sampleDataNextID++;
                    // save data item to the original datasource

                    var gridData = sampleData;
                    var totalNumber = gridData.length;
                    var count = 0;

                    for (var i = 0; i < totalNumber; i++) {
                        var productId = gridData[i].product_id;
                        var colorId = gridData[i].color_id;
                        var productVersionId = gridData[i].product_version_id;
                        //var isLiveDummy= gridData[i].is_live_dummy;
                        //if (e.data.product_id === productId && e.data.color_id === colorId && e.data.is_live_dummy===isLiveDummy && e.data.product_version_id === productVersionId) {
                        if (e.data.product_id === productId && e.data.color_id === colorId && e.data.product_version_id === productVersionId) {
                            count++;
                        }
                    }
                    // Check Requisition Validation
                    var mmm = e.data.quantity;
                    var checkNumeric = $.isNumeric(mmm);
                    if (checkNumeric == false) {
                        sweetAlert("Sorry...", "not valid requisition quantity !!!", "warning");
                        return false;
                    }
                    if (mmm % 1 != 0) {
                        sweetAlert("Sorry...", "requisition quantity decimal not allowed !!!", "warning");
                        return false;
                    }
                    if (e.data.quantity == 0) {

                        sweetAlert("Sorry...", "requisition quantity zero not allowed !!!", "warning");
                        return false;
                    }
                    if (e.data.quantity == null) {
                        sweetAlert("Sorry...", "requisition quantity is required !!!", "warning");
                        return false;
                    }
                    if (e.data.quantity < 0) {
                        sweetAlert("Sorry...", "negative requisition quantity not allowed !!!", "warning");
                        return false;
                    }
                    if ($("#requisition_date").data("kendoDateTimePicker").value() == null) {
                        sweetAlert("Sorry...", "Please select requisition date !", "warning");
                        return false;
                    }
                    if ($("#from_warehouse_id").data("kendoComboBox").value() == "") {
                        sweetAlert("Sorry...", "Please select warehouse!", "warning");
                        return false;
                    }
                    if ($("#customer_hbu").data("kendoComboBox").value() == "") {
                        sweetAlert("Sorry...", "Please select Customer HBU!", "warning");
                        return false;
                    }
                    if ($("#pricing").data("kendoComboBox").value() == "") {
                        sweetAlert("Sorry...", "Please select pricing !", "warning");
                        return false;
                    }

                    if (count > 0) {
                        sweetAlert("Sorry...", "Selected Product is Duplicate !!!", "warning");

                        return false;
                    } else {
                        sampleData.push(e.data);
                        e.success(e.data);
                        gridOfPromotion(e.data.has_serial);
                        return true;
                    }


                },
                update: function (e) {

                    var mmm = e.data.quantity;
                    var checkNumeric = $.isNumeric(mmm);
                    if (checkNumeric == false) {
                        sweetAlert("Sorry...", "not valid requisition quantity !!!", "warning");
                        return false;
                    }

                    if (mmm % 1 != 0) {
                        sweetAlert("Sorry...", "requisition quantity decimal not allowed !!!", "warning");
                        return false;
                    }
                    if (e.data.quantity == 0) {
                        sweetAlert("Sorry...", "requisition quantity zero not allowed !!!", "warning");
                        return false;
                    }
                    if (e.data.quantity == null) {
                        sweetAlert("Sorry...", "requisition quantity is required !!!", "warning");
                        return false;
                    }

                    if (e.data.quantity < 0) {
                        sweetAlert("Sorry...", "negative requisition quantity not allowed !!!", "warning");
                        return false;
                    }
                    if ($("#requisition_date").data("kendoDateTimePicker").value() == null) {
                        alert("please select requisition date");
                        return false;
                    }


                    else {
                        sampleData[getIndexById(e.data.requisition_details_id)] = e.data;
                        e.success();
                        gridOfPromotion(e.data.has_serial);
                    }


                },
                destroy: function (e) {
                    // locate item in original datasource and remove it
                    sampleData.splice(getIndexById(e.data.requisition_details_id), 1);
                    // on success
                    e.success();
                    var entityGrid = $("#RequisitionDetailsGrid").data("kendoGrid");
                    var gridData = entityGrid.dataSource.data();
                    var totalNumber = gridData.length;
                    var amount = 0;

                    for (var i = 0; i < totalNumber; i++) {
                        amount += +parseFloat(gridData[i].line_total).toFixed(2);
                    }

                    $("#total_invoice_amount").val(amount);

                    gridOfPromotion(e.data.has_serial);
                    

                }
            },
            error: function (e) {
                // handle data operation error
                alert("Status: " + e.status + "; Error message: " + e.errorThrown);
            },
            pageSize: 10,
            batch: false,
            schema: {
                model: {
                    id: "requisition_details_id",
                    fields: {
                        requisition_details_id: { editable: false, nullable: true },
                        product_id: { field: "product_id", type: "integer" },
                        product_name: { type: "string" },
                        product_category_id: { field: "product_category_id", type: "integer" },
                        product_category_name: { type: "string", editable: false },
                        unit_id: { field: "unit_id", type: "integer" },
                        unit_name: { type: "string" },
                        brand_id: { field: "brand_id", type: "integer" },
                        brand_name: { type: "string", editable: false },
                        quantity: { type: "string" },
                        color_id: { field: "color_id", type: "integer" },
                        color_name: { type: "string" },
                        product_version_id: { field: "product_version_id", type: "integer" },
                        product_version_name: { type: "string" },
                        price_ori: { type: "number" },
                        price: { type: "number" },
                        mrp_cost: { type: "number" },
                        dealer_cost: { type: "number" },
                        b2b_cost: { type: "number" },
                        retailer_cost: { type: "number" },
                        internal_cost: { type: "number" },
                        amount: { type: "string" },
                        discount: { type: "number" },
                        dis_amt: { type: "string" },
                        line_total: { type: "string" },
                        promotion_master_id: { field: "promotion_master_id", type: "integer" },
                        promotion_name: { type: "string" },
                        has_serial: { type: "boolean" }
                    }
                }
            }
        });

        //Requisition Grid
        $("#RequisitionDetailsGrid").kendoGrid({
            dataSource: dataSource,
            pageable: true,
            toolbar: ["create"],
            selectable: true,
            save: function (data) {
                $("#scanGridForIMEI").show();
                $("#btnDiv").show();
                var amount = 0;
                //var tempAmount = +data.model.quantity * +data.model.price;
                var tempAmount = 0;

                // Requisition Grid Price type
                var pp = $("#pricing").val();
                if (pp == 1) {
                    data.model.set("price", data.model.mrp_cost);
                    tempAmount = data.model.quantity * data.model.mrp_cost;
                }
                else if (pp == 2) {

                    // alert(data.model.dealer_cost);
                    data.model.set("price", data.model.dealer_cost);
                    tempAmount = data.model.quantity * data.model.dealer_cost;
                }
                else if (pp == 3) {

                    //alert(data.model.retailer_cost);
                    data.model.set("price", data.model.retailer_cost);
                    tempAmount = data.model.quantity * data.model.retailer_cost;
                }
                else if (pp == 4) {

                    // alert(data.model.internal_cost);
                    data.model.set("price", data.model.internal_cost);
                    tempAmount = data.model.quantity * data.model.internal_cost;
                }
                else if (pp == 5) {

                    //  alert(data.model.b2b_cost);
                    data.model.set("price", data.model.b2b_cost);
                    tempAmount = data.model.quantity * data.model.b2b_cost;
                }

                else {
                    //manual
                    tempAmount = data.model.quantity * data.model.price;
                }


                //edit by rabbi
                var discountAmount = 0;
                var totalAmount = 0;

                discountAmount = tempAmount * ((data.model.discount) / 100);
                totalAmount = tempAmount - discountAmount;
                data.model.set("amount", tempAmount);
                data.model.set("dis_amt", discountAmount);

                data.model.set("line_total", totalAmount);

                var entityGrid = $("#RequisitionDetailsGrid").data("kendoGrid");
                var gridData = entityGrid.dataSource.data();
                var totalNumber = gridData.length;

                for (var i = 0; i < totalNumber; i++) {
                    amount += +parseFloat(gridData[i].line_total).toFixed(2);
                }

                $("#total_invoice_amount").val(amount);
            },

            cancel: function (data) {
                var tempAmount = +data.model.quantity * +data.model.price;
                data.model.set("line_total", tempAmount);

                var gridData = sampleData;
                var totalNumber = gridData.length;
                console.log(sampleData);

            },
            columns: [
                { field: "product_id", title: "Product", template: "#= product_name #", editor: productDropDownEditor, width: "130px" },
                { field: "color_id", title: "Color", template: "#= color_name #", editor: colorDropDownEditor, width: "100px" },
                { field: "product_version_id", title: "Version", template: "#= product_version_name #", editor: productVersionDropDownEditor, width: "100px" },
                { field: "quantity", title: "Quantity", width: "50px" },
                { field: "promotion_master_id", title: "Promotion", template: "#= promotion_name #", editor: promotionDropDownEditor, width: "100px" },
                { field: "price", title: "Price", width: "50px" },
                { field: "amount", title: "Amount", width: "50px" },
                { command: ["edit", "destroy"], title: "&nbsp;", width: "110px" }
            ],
            editable: "inline"
        });


        //template for product comboBox
        function productDropDownEditor(container, options) {
            jQuery('<input id="productId" required data-text-field="product_name" data-value-field="product_id" data-bind="value:' + options.field + '"/>')
                .appendTo(container)
                .kendoComboBox({
                    autoBind: false,
                    placeholder: "-Select-",
                    dataSource: {
                        transport: {
                            read: {
                                url: "@UrlConfig.Action("GetAllProductWithoutAss", "OnlineRequisition")",
                                type: "GET"
                            }
                        }

                    },

                    change: function (e) {
                        var dataItem = this.dataItem(e.item);
                        pId = dataItem.product_id;

                        console.log(dataItem.product_name);
                        var grid = $("#RequisitionDetailsGrid").data("kendoGrid");
                        var sel = grid.select();
                        var sel_idx = sel.index();
                        var gridData = grid.dataSource.data();
                        gridData[sel_idx].product_id = dataItem.product_id,
                        gridData[sel_idx].product_name = dataItem.product_name;


                        $.ajax({
                            type: "GET",
                            url: "@UrlConfig.Action("GetProductsWiseFirstColorVersion", "Product")",
                            data: {
                                product_id: pId
                            },
                            dataType: "json",
                            contentType: "application/json",
                            success: function (data) {
                                gridData[sel_idx].color_id = data.color_id;
                                $("#colorId").data("kendoComboBox").value(gridData[sel_idx].color_id);
                                gridData[sel_idx].color_name = data.color_name;
                                gridData[sel_idx].product_version_id = data.product_version_id;
                                gridData[sel_idx].product_version_name = data.product_version_name;
                                $("#productversionId").data("kendoComboBox").value(gridData[sel_idx].product_version_id);
                                gridData[sel_idx].mrp_cost = data.mrp_cost;
                                gridData[sel_idx].dealer_cost = data.dealer_cost;
                                gridData[sel_idx].b2b_cost = data.b2b_cost;
                                gridData[sel_idx].retailer_cost = data.retailer_cost;
                                gridData[sel_idx].internal_cost = data.internal_cost;

                            }
                        });

                        //Load Promotion

                        // var cId = $("#party_type_id").val();

                        //Internal EMI party/channel id 11.
                        var cId = 11;

                        $("#promotionId").kendoComboBox({
                            autoBind: true,
                            placeholder: "--- Select Promotion ---",
                            dataTextField: "promotion_name",
                            dataValueField: "promotion_master_id",
                            dataSource: {
                                type: "json",
                                transport: {
                                    read: {
                                        url: "@UrlConfig.Action("GetPromotionInfoDropdown", "Promotion")",
                                        data: { product_id: pId, channel_id: cId }
                                    }
                                }
                            },
                            change: function (e) {

                                var dataItem = this.dataItem(e.item);

                                //console.log(dataItem.product_name);
                                var grid = $("#RequisitionDetailsGrid").data("kendoGrid");
                                var sel = grid.select();
                                var sel_idx = sel.index();
                                var gridData = grid.dataSource.data();
                                gridData[sel_idx].promotion_master_id = dataItem.promotion_master_id,
                                gridData[sel_idx].promotion_name = dataItem.promotion_name;
                            }
                        });

                    }
                });
        }


        //template for color comboBox
        function colorDropDownEditor(container, options) {
            jQuery('<input id="colorId" data-text-field="color_name" data-value-field="color_id" data-bind="value:' + options.field + '"/>')
                .appendTo(container)
                .kendoComboBox({
                    autoBind: true,
                    cascadeFrom: "productId",
                    placeholder: "-Select-",
                    dataSource: {
                        transport: {
                            read: {
                                url: "@UrlConfig.Action("GetProductwiseColor", "ProductPriceing")",
                                type: "GET"
                            }
                        }

                    },

                    change: function (e) {
                        var dataItem = this.dataItem(e.item);
                        cId = dataItem.color_id;

                        console.log(dataItem.product_name);
                        var grid = $("#RequisitionDetailsGrid").data("kendoGrid");
                        var sel = grid.select();
                        var sel_idx = sel.index();
                        var gridData = grid.dataSource.data();
                        var vId = gridData[sel_idx].product_version_id;

                        gridData[sel_idx].color_id = dataItem.color_id,
                        gridData[sel_idx].color_name = dataItem.color_name;

                        var pid = 8;
                        //alert(vId);
                        $.ajax({
                            type: "GET",
                            url: "@UrlConfig.Action("GetProductColorVersionwisePrice", "ProductPriceing")",
                            data: {
                                party_type_id: pid,
                                product_id: pId,
                                color_id: cId,
                                product_version_id: vId
                            },
                            dataType: "json",
                            contentType: "application/json",
                            success: function (data) {

                                gridData[sel_idx].mrp_cost = data.mrp_cost;
                                gridData[sel_idx].dealer_cost = data.dealer_cost;
                                gridData[sel_idx].b2b_cost = data.b2b_cost;
                                gridData[sel_idx].retailer_cost = data.retailer_cost;
                                gridData[sel_idx].internal_cost = data.internal_cost;


                            }
                        });

                        //load version dropdown by product && color wise
                        $("#productversionId").kendoComboBox({
                            autoBind: true,
                            placeholder: "--- Select Version ---",
                            dataTextField: "product_version_name",
                            dataValueField: "product_version_id",
                            dataSource: {
                                type: "json",
                                transport: {
                                    read: {
                                        url: "@UrlConfig.Action("GetProductColorwiseVersion", "ProductPriceing")",
                                        data: { aa: pId, bb: cId }
                                    }
                                }
                            },
                            change: function (e) {

                                var dataItem = this.dataItem(e.item);

                                //////////////////////23.01.2017 start//////////////////////
                                //to get party type, product, color and version wise price
                                var partyTypeId = 8;
                                $.ajax({
                                    type: "GET",
                                    url: "@UrlConfig.Action("GetProductColorVersionwisePrice", "ProductPriceing")",
                                    data: {
                                        party_type_id: partyTypeId,
                                        product_id: pId,
                                        color_id: cId,
                                        product_version_id: dataItem.product_version_id
                                    },
                                    dataType: "json",
                                    contentType: "application/json",
                                    success: function (data) {
                                        gridData[sel_idx].mrp_cost = data.mrp_cost;
                                        gridData[sel_idx].dealer_cost = data.dealer_cost;
                                        gridData[sel_idx].b2b_cost = data.b2b_cost;
                                        gridData[sel_idx].retailer_cost = data.retailer_cost;
                                        gridData[sel_idx].internal_cost = data.internal_cost;
                                    }
                                });
                                //////////////////////23.01.2017 end//////////////////////

                                var grid = $("#RequisitionDetailsGrid").data("kendoGrid");
                                var sel = grid.select();
                                var sel_idx = sel.index();
                                var gridData = grid.dataSource.data();
                                gridData[sel_idx].product_version_id = dataItem.product_version_id,
                                gridData[sel_idx].product_version_name = dataItem.product_version_name;

                            }
                        });
                    }
                });
        }

        //load all version
        function productVersionDropDownEditor(container, options) {

            jQuery('<input id="productversionId" data-text-field="product_version_name" data-value-field="product_version_id" data-bind="value:' + options.field + '"/>')
                .appendTo(container)
                .kendoComboBox({
                    autoBind: true,
                    placeholder: "-Select-",
                    dataSource: {
                        transport: {
                            read: {
                                url: "@UrlConfig.Action("GetAllProductVersionForDropDown", "ProductVersion")",

                                type: "GET"
                            }
                        }

                    },

                    change: function (e) {
                        var dataItem = this.dataItem(e.item);
                        var grid = $("#RequisitionDetailsGrid").data("kendoGrid");
                        var sel = grid.select();
                        var sel_idx = sel.index();
                        var gridData = grid.dataSource.data();
                        gridData[sel_idx].product_version_id = dataItem.product_version_id,
                            gridData[sel_idx].product_version_name = dataItem.product_version_name;


                    }
                });
        }

        function promotionDropDownEditor(container, options) {

            jQuery('<input id="promotionId" data-text-field="promotion_name" data-value-field="promotion_master_id" data-bind="value:' + options.field + '"/>')
                .appendTo(container)
                .kendoComboBox({
                    autoBind: true,
                    placeholder: "-Select-",
                    cascadeFrom: "productId",
                    dataSource: {
                        transport: {
                            read: {
                                url: "@UrlConfig.Action("GetPromotinByChannelId", "Promotion")?channelId=" + 11,
                                type: "GET"
                            }
                        }

                    },

                    change: function (e) {
                        var dataItem = this.dataItem(e.item);
                        var grid = $("#RequisitionDetailsGrid").data("kendoGrid");
                        var sel = grid.select();
                        var sel_idx = sel.index();
                        var gridData = grid.dataSource.data();

                        gridData[sel_idx].promotion_master_id = dataItem.promotion_master_id,
                            gridData[sel_idx].promotion_name = dataItem.promotion_name;
                    }
                });
        }


        function gridOfPromotion(serial) {

            var promotionArray = [];

            var grido = $("#RequisitionDetailsGrid").data("kendoGrid")._data;
            for (var r = 0; r < grido.length; r++) {
                $.ajax({
                    type: "GET",
                    url: "@UrlConfig.Action("GetPromotionInformation", "Promotion")",
                    data: {
                        product_id: grido[r].product_id,
                        promotion_master_id: grido[r].promotion_master_id,
                        quantity: grido[r].quantity
                    },
                    dataType: "json",
                    contentType: "application/json",
                    success: function (data) {
                        //console.log(data);

                        //grid start
                        //alert(data);
                        // if (data != false) {

                        var ccc = true;

                        for (var t = 0; t < data.length; t++) {
                            //alert(data[t].has_serial);
                            var productSummary = {
                                product_name: data[t].product_name,
                                product_id: data[t].product_id,
                                promotion_details_id: data[t].promotion_details_id,
                                promotion_master_id: data[t].promotion_master_id,
                                gift_quantity: data[t].gift_quantity,
                                price: 0,
                                line_total: 0,
                                product_category_id: data[t].product_category_id,
                                product_category_name: data[t].product_category_name,
                                color_name: '',
                                product_version_name: '',
                                has_serial: data[t].has_serial
                            };


                            promotionArray.push(productSummary);

                        }

                        //alert(promotionArray);

                        var dataSource3 = new kendo.data.DataSource({
                            transport: {
                                read: function (e) {
                                    e.success(promotionArray);
                                },
                                update: function (e) {
                                    e.success();
                                },
                            },
                            pageSize: 10,
                            batch: false,
                            schema: {
                                model: {
                                    id: "promotion_details_id",
                                    fields: {
                                        promotion_details_id: { editable: false, nullable: true },
                                        product_id: { field: "product_id", type: "integer", editable: false },
                                        product_name: { type: "string", editable: false },
                                        product_category_id: { field: "product_category_id", type: "integer" },
                                        product_category_name: { type: "string", editable: false },
                                        unit_id: { field: "unit_id", type: "integer" },
                                        unit_name: { type: "string" },
                                        promotion_master_id: { type: "integer" },
                                        brand_name: { type: "string", editable: false },
                                        gift_quantity: { type: "string", editable: false },
                                        color_id: { field: "color_id", type: "integer" },
                                        color_name: { type: "string" },
                                        product_version_id: { field: "product_version_id", type: "integer" },
                                        product_version_name: { type: "string" },
                                        price: { type: "number", editable: false },
                                        line_total: { type: "string", editable: false },
                                        has_serial: { type: "boolean" }
                                    }
                                }
                            }
                        });

                        $("#PromotionList").kendoGrid({
                            dataSource: dataSource3,
                            pageable: true,
                            selectable: true,

                            columns: [
                                { field: "product_name", title: "Product", width: "130px" },
                                { field: "color_id", title: "Color", template: "#= color_name #", editor: colorDropDownEditorForPromotion, width: "100px" },
                                { field: "product_version_id", title: "Version", template: "#= product_version_name #", editor: productVersionDropDownEditorForPromotion, width: "100px" },
                                { field: "gift_quantity", title: "Quantity", width: "50px" },
                                { field: "price", title: "Price", width: "50px" },
                                { field: "line_total", title: "Total Amount", width: "70px" },
                                { command: ["edit"], title: "&nbsp;", width: "110px" }
                            ],
                            editable: "inline"
                        });

                        function colorDropDownEditorForPromotion(container, options) {
                            jQuery('<input id="colorIdPromotion" required data-text-field="color_name" data-value-field="color_id" data-bind="value:' + options.field + '"/>')
                                .appendTo(container)
                                .kendoComboBox({
                                    autoBind: true,
                                    placeholder: "-Select-",
                                    dataSource: {
                                        transport: {
                                            read: {
                                                url: "@UrlConfig.Action("GetAllColors", "Color")",
                                                type: "GET"
                                            }
                                        }

                                    },

                                    change: function (e) {
                                        var dataItem = this.dataItem(e.item);
                                        var cId = dataItem.color_id;

                                        console.log(dataItem.product_name);
                                        var grid = $("#PromotionList").data("kendoGrid");
                                        var sel = grid.select();
                                        var sel_idx = sel.index();
                                        var gridData = grid.dataSource.data();
                                        var vId = gridData[sel_idx].product_version_id;

                                        //alert(dataItem.color_id);
                                        //alert(dataItem.color_name);
                                        gridData[sel_idx].color_id = dataItem.color_id,
                                            gridData[sel_idx].color_name = dataItem.color_name;

                                        var pId = gridData[sel_idx].product_id;

                                        //load version dropdown by product && color wise
                                        $("#productversionIdPromotion").kendoComboBox({
                                            autoBind: true,
                                            placeholder: "--- Select Version ---",
                                            dataTextField: "product_version_name",
                                            dataValueField: "product_version_id",
                                            dataSource: {
                                                type: "json",
                                                transport: {
                                                    read: {
                                                        url: "@UrlConfig.Action("GetProductColorwiseVersion", "ProductPriceing")",
                                                        data: { aa: pId, bb: cId }
                                                    }
                                                }
                                            },
                                            change: function (e) {

                                                var dataItem = this.dataItem(e.item);
                                                //////////////////////23.01.2017 end//////////////////////

                                                var grid = $("#PromotionList").data("kendoGrid");
                                                var sel = grid.select();
                                                var sel_idx = sel.index();
                                                var gridData = grid.dataSource.data();
                                                //alert(dataItem.product_version_id);
                                                //alert(dataItem.product_version_name);
                                                gridData[sel_idx].product_version_id = dataItem.product_version_id,
                                                    gridData[sel_idx].product_version_name = dataItem.product_version_name;

                                            }
                                        });
                                    }
                                });
                        }

                        //load all version
                        function productVersionDropDownEditorForPromotion(container, options) {

                            jQuery('<input id="productversionIdPromotion" required data-text-field="product_version_name" data-value-field="product_version_id" data-bind="value:' + options.field + '"/>')
                                .appendTo(container)
                                .kendoComboBox({
                                    autoBind: true,
                                    placeholder: "-Select-",
                                    dataSource: {
                                        transport: {
                                            read: {
                                                url: "@UrlConfig.Action("GetAllProductVersionForDropDown", "ProductVersion")",

                                                type: "GET"
                                            }
                                        }

                                    },

                                    change: function (e) {
                                        var dataItem = this.dataItem(e.item);
                                        var grid = $("#PromotionList").data("kendoGrid");
                                        var sel = grid.select();
                                        var sel_idx = sel.index();
                                        var gridData = grid.dataSource.data();
                                        gridData[sel_idx].product_version_id = dataItem.product_version_id,
                                        gridData[sel_idx].product_version_name = dataItem.product_version_name;


                                    }
                                });
                        }

                        //  }
                    }
                });
            }

        }

        //end


        function getModelIdsByNames(models) {
            var returnValue;
            $.ajax({
                type: "POST",
                async: false,
                url: "@UrlConfig.Action("GetModelIdsByNames", "Grn")",
                data: JSON.stringify(models),
                dataType: "json",
                contentType: "application/json",
                success: function (modelData) {
                    returnValue = modelData;
                }
            });
            //  alert("Y");
            return returnValue;
        }

        function getColorIdsByNames(colors) {
            var returnValue;
            $.ajax({
                type: "POST",
                async: false,
                url: "@UrlConfig.Action("GetColorIdsByNames", "Grn")",
                data: JSON.stringify(colors),
                dataType: "json",
                contentType: "application/json",
                success: function (colorData) {
                    returnValue = colorData;
                }
            });
            // alert("Y");
            return returnValue;
        }

        function imeiList(listOfImei) {
            var dataSource2 = new kendo.data.DataSource({
                pageSize: 20,
                transport: {
                    read: function (f) {
                        f.success(listOfImei);
                    },
                    destroy: function (f) {
                        imeiDataForImeiGrid.splice(getImeiGridData(f.data.receive_serial_no_details_id), 1);
                        f.success();

                    }
                },

                autoSync: false,
                schema: {
                    errors: function (e) {
                        console.log(e.errors);
                        //alert(e.error);
                        if (e.output === "error") {
                            console.log(e.output);
                        }

                    },

                    model: {
                        id: "receive_serial_no_details_id",
                        fields: {
                            receive_serial_no_details_id: { editable: false, nullable: true },
                            product_id: { type: "number" },
                            color_id: { type: "number" },
                            product_version_id: { type: "number" },
                            product_name: { type: "string" },
                            color_name: { type: 'string' },
                            version: { type: "string" },
                            imei: { type: "string" },
                            imei_no2: { type: "string" }

                        }

                    }
                }

            });
            // Imei Scan Grid
            jQuery("#imeiScanGrid").kendoGrid({
                dataSource: dataSource2,
                scrollable: true,
                filterable: true,
                pageable: {
                    refresh: true,
                    input: true,
                    pageSize: 20,
                    numeric: false,
                    pageSizes: [10, 20, 50]
                },

                sortable: true,
                resizable: true,

                columns: [
                    { field: "product_name", title: "Product", width: "50px" },
                    { field: "color_name", title: "Color", width: "50px" },
                    { field: "version", title: "Version", width: "50px" },
                    { field: "imei", title: "IMEI 1", width: "50px" },
                    { field: "imei_no2", title: "IMEI 2", width: "50px" },
                    //{ field: "scan_quantity", title: "Scan Quantity", width: "50px" },
                    { command: ["destroy"], title: "&nbsp;", width: "50px" }
                ],
                editable: "inline"
            });
        }

        // Fucntion Duplicate check
        function duplicate(listOfDuplicate, imei) {
            if (!listOfDuplicate) {
                return false;
            } else {
                for (var i = 0; i < listOfDuplicate.length; i++) {
                    if (listOfDuplicate[i].imei == imei || listOfDuplicate[i].imei_no2 == imei) {
                        return true;
                    }
                }
                return false;
            }
        }
        // Fucntion Sum Grid Quantity
        function sumGridQuantity(listOfDuplicate) {
            var count = 0;
            for (var i = 0; i < listOfDuplicate.length; i++) {
                count += parseFloat(listOfDuplicate[i].quantity);

            }
            return count;
        }
        //IMEI SCAN
        var mrrDetailsGrid = [];
        var imeiDataForImeiGrid = [];

        // Scan Enter Event
        $('#daynamicPanel :input').live('keyup', function (e) {

            //// $("#ddl").data("kendoDropDownList").text();
            //var damage_type_name = $("#damage_type_id").data("kendoComboBox").text();


            if (e.keyCode === 13) {
                $(this).trigger("enterKey");
                var id = this.id;
                Loading(false);

                var grid = $("#RequisitionDetailsGrid").data("kendoGrid")._data;
                var imei = $("#imei_scan").val();
                var warehouseId = $("#from_warehouse_id").val();

                $.ajax({
                    type: "GET",
                    url: "@UrlConfig.Action("GetImeiInfoForMrr", "Mrr")?imei=" + imei + "&warehouseId=" + warehouseId,
                    dataType: "json",
                    contentType: "application/json",
                    success: function (data) {

                        if (data != null) {
                            $("#imeiListGrid").show();
                            $("#payment_information").show();
                            var count = 0;
                            for (var i = 0; i < grid.length; i++) {


                                var gColId = grid[i].color_id;
                                var gQuant = grid[i].quantity;
                                //alert(gQuant);
                                var gPId = grid[i].product_id;
                                var gVerId = grid[i].product_version_id;

                                if (data.product_id == gPId && data.color_id == gColId && data.product_version_id == gVerId) {

                                    var productImei = {

                                        receive_serial_no_details_id: data.receive_serial_no_details_id,
                                        product_name: grid[i].product_name,
                                        color_name: grid[i].color_name,
                                        version: grid[i].product_version_name,
                                        product_id: grid[i].product_id,
                                        color_id: grid[i].color_id,
                                        product_version_id: grid[i].product_version_id,
                                        imei: data.imei_no,
                                        // damage_type_name:damage_type_name,
                                        imei_no2: data.imei_no2
                                    };

                                    var checkDuplicate = duplicate(imeiDataForImeiGrid, imei.replace(/\s+/g, ''));

                                    //var gridScan = $("#MRRIMEIGrid").data("kendoGrid")._data;
                                    var kkk = sumGridQuantity(grid);
                                    // alert(kkk);
                                    // alert(countScaned);
                                    if (kkk <= countScaned) {
                                        swal("Exception", "Scan Quantity can not be over Requisition Quantity!!", "warning");
                                        return false;
                                    } else {
                                        if (checkDuplicate) {
                                            swal("Exception", "IMEI already exist in list !!", "warning");
                                            return false;
                                        }
                                        else {
                                            //
                                            countScaned++;

                                            // check requisition Grid and Scan Grid Similarity
                                            //Call function matchProductWithTwoGrid
                                            if (matchProductWithTwoGrid(grid[i].product_id, grid[i].color_id, grid[i].product_version_id, grid[i].quantity, countScaned)) {
                                                swal("Exception", "IMEI already Scaned for " + grid[i].product_name + "!!", "warning");
                                                return false;
                                            } else {
                                                //alert("aisi");
                                                imeiDataForImeiGrid.push(productImei);
                                                imeiList(imeiDataForImeiGrid);
                                                var firstItem = $('#RequisitionDetailsGrid').data().kendoGrid.dataSource.data()[i];
                                                firstItem.set('mrr_qty', grid[i].mrr_qty + 1);
                                                firstItem.set('saleable_qty', grid[i].receive_quantity - grid[i].mrr_qty);
                                            }


                                        }


                                        count = 1;
                                    }


                                }

                            }
                            //alert(count);
                            if (count == 0) {
                                swal("Exception", "IMEI not exist in list !!", "warning");
                                return false;
                            }
                        }
                        else {
                            // alert("Kiron");
                            swal("Exception", "IMEI not matched !!", "warning");
                            return false;
                        }

                    }
                });


                $("#" + id + "").val("");
            }
        });

        function matchProductWithTwoGrid(pId, colId, verId, qty, CheckGlobalCounter) {
            var counter = 0;
            var check = false;
            //alert("aisi");
            if (CheckGlobalCounter > 1) {
                var gridScan = $("#imeiScanGrid").data("kendoGrid")._data;
                for (var k = 0; k < gridScan.length; k++) {
                    if (gridScan[k].product_id == pId && gridScan[k].color_id == colId && gridScan[k].product_version_id == verId) {
                        counter++;


                    }

                }
                if (counter == qty) {
                    check = true;
                }
            }

            return check;
        }


        //Delete Qty Function
        function deleteSummaryGridData(pId, colId, verId, damageTypeName) {
            var objectNew = "";

            var grid = $("#RequisitionDetailsGrid").data("kendoGrid")._data;

            for (var j = 0; j < grid.length; j++) {
                if (grid[j].product_id == pId && grid[j].color_id == colId && grid[j].product_version_id == verId) {
                    var firstItem = $('#RequisitionDetailsGrid').data().kendoGrid.dataSource.data()[j];
                    firstItem.set('mrr_qty', grid[j].mrr_qty - 1);
                    firstItem.set('saleable_qty', grid[j].saleable_qty + 1);

                }
            }
            return null;
        }
        function getImeiGridData(receive_serial_no_details_id) {

            var l = imeiDataForImeiGrid.length;
            //alert("dhukse");
            for (var j = 0; j < l; j++) {
                if (imeiDataForImeiGrid[j].receive_serial_no_details_id == receive_serial_no_details_id) {

                    deleteSummaryGridData(imeiDataForImeiGrid[j].product_id, imeiDataForImeiGrid[j].color_id, imeiDataForImeiGrid[j].product_version_id, imeiDataForImeiGrid[j].damage_type_name);

                    return j;
                }
            }
            return null;
        }




        $("#btnInternalRequisition").click(function () {
            Loading(false);

            //Internal Requisition Master Data

            var from_warehouse_id = $('#from_warehouse_id').val();
            var customer_hbu = $('#customer_hbu').val();
            var customer_name = $('#customer_name').val();
            var mobile_no = $('#mobile_no').val();
            var pricing = $('#pricing').val();
            var payment_type = $('#payment_type').val();
            var remarks = $('#remarks').val();
            var userId = '@userId';


            if (from_warehouse_id == null || from_warehouse_id == "") {
                swal("Warning", "Please Select From Warehouse!!", "warning");
                return false;
            }
            if (customer_hbu == null || customer_hbu == "") {
                swal("Warning", "Please Select Customer HBU!!", "warning");
                return false;
            }
            if (customer_name == null || customer_name == "") {
                swal("Warning", "Please Select Customer Name!!", "warning");
                return false;
            }
            if (mobile_no == null || mobile_no == "") {
                swal("Warning", "Please Select Customer Mobile No!!", "warning");
                return false;
            }
            if (pricing == null || pricing == "") {
                swal("Warning", "Please Select Price Type!!", "warning");
                return false;
            }
            if (payment_type == null || payment_type == "") {
                swal("Warning", "Please Select payment Type!!", "warning");
                return false;
            }

            // Master Data List

            var internalRequisitionMasterData = {
                from_warehouse_id: from_warehouse_id,
                customer_hbu: customer_hbu,
                customer_name: customer_name,
                mobile_no: mobile_no,
                pricing: pricing,
                payment_type: payment_type,
                remarks: remarks,
                created_by: userId
            };

            //Requisition Data List Grid
            var requisitionDetailsList = [];
            var requisitionDetailsGrid = $("#RequisitionDetailsGrid").data("kendoGrid").dataSource.data();
            // alert(requisitionDetailsGrid.length);
            for (var i = 0; i < requisitionDetailsGrid.length; i++) {
                var requisitionDetails = {
                    product_id: requisitionDetailsGrid[i].product_id,
                    color_id: requisitionDetailsGrid[i].color_id,
                    product_version_id: requisitionDetailsGrid[i].product_version_id,
                    quantity: requisitionDetailsGrid[i].quantity,
                    amount: requisitionDetailsGrid[i].amount
                };
                requisitionDetailsList.push(requisitionDetails);



            }
            // IMEI Scan ListGrid
            var rcvSerialList = [];
            if (countScaned > 0) {
                var rcvSerialsIMEIGrid = $("#imeiScanGrid").data("kendoGrid").dataSource.data();

                for (var i = 0; i < rcvSerialsIMEIGrid.length; i++) {

                    var receiveSerialNoDetails = {
                        receive_serial_no_details_id: rcvSerialsIMEIGrid[i].receive_serial_no_details_id,
                        product_id: rcvSerialsIMEIGrid[i].product_id,
                        color_id: rcvSerialsIMEIGrid[i].color_id,
                        product_version_id: rcvSerialsIMEIGrid[i].product_version_id,
                        imei: rcvSerialsIMEIGrid[i].imei,
                        imei_no2: rcvSerialsIMEIGrid[i].imei_no2,


                    };
                    rcvSerialList.push(receiveSerialNoDetails);


                }
            }




            var internalRequisitionModel = {
                internalRequisitionMaster: internalRequisitionMasterData,
                requisitionDetails: requisitionDetailsList,
                ReceiveSerialNoDetails: rcvSerialList

            };

            console.log(internalRequisitionModel);
            $.ajax({
                type: "POST",
                url: "@UrlConfig.Action("", "")",
                data: JSON.stringify(internalRequisitionModel),
                dataType: "json",
                contentType: "application/json",
                success: function (data) {
                    Loading(false);
                    console.log(data);
                    if (data.output === "success") {
                        swal("Success", data.msg, "success");
                        window.location.href = '/Mrr/Index';
                        return false;
                    } else {
                        swal("Exception", data.msg, "error");
                        return false;
                    }
                }
            });

        });

    });
    //Kiron:29-03-2017

</script>
